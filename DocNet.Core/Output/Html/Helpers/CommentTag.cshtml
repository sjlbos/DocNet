@*Generator: WebPagesHelper GeneratePrettyNames: true Namespace: DocNet.Razor.Helpers *@
@using System
@using System.Collections.Generic
@using System.Linq
@using DocNet.Core.Models.Comments.Xml

@functions
{
    private static string CombineText(IEnumerable<string> text)
    {
        return String.Join("\n", text);
    }
}

@helper RenderSummary(SummaryTag summaryTag)
{
    <div class="summary-comment">
        <p>
            @RenderTopLevelContainer(summaryTag)
        </p>
    </div>
}

@helper RenderTableSummary(SummaryTag summaryTag)
{
    <div class="expand-table-cell summary-comment">
        @RenderTopLevelContainer(summaryTag)
    </div>
}

@helper RenderRemarks(RemarksTag remarksTag)
{
    <div class="remarks-comment">
        <p>
            @RenderTopLevelContainer(remarksTag)
        </p> 
    </div>
}

@helper RenderExample(ExampleTag exampleTag)
{
    <div class="example-comment">
        <p>
            @RenderTopLevelContainer(exampleTag)
        </p>
    </div>
}

@helper RenderReturns(ReturnsTag returnsTag)
{
    <div class="returns-comment">
        <p>
            @RenderTopLevelContainer(returnsTag)
        </p>
    </div>
}

@helper RenderValue(ValueTag valueTag)
{
    <div class="value-comment">
        <p>
            @RenderTopLevelContainer(valueTag)
        </p>
    </div>
}

@helper RenderParam(ParameterTag paramTag)
{
    <div class="parameter-comment">
        <p>
            @RenderTopLevelContainer(paramTag)
        </p>
    </div>
}

@helper RenderTypeParam(TypeParameterTag typeParamTag)
{
    <div class="type-parameter-comment">
        <p>
            @RenderTopLevelContainer(typeParamTag)
        </p>
    </div>
}

@helper RenderException(ExceptionTag exceptionTag)
{
    <div class="exception-comment">
        <p>
            @RenderTopLevelContainer(exceptionTag)
        </p>
    </div>
}

@helper RenderSeeAlso(SeeAlsoTag seeAlsoTag)
{
    <div class="see-also-comment">
        <p>
            @seeAlsoTag.ReferencedElementName<br/>
            <ul class="bulleted">
                @foreach (string s in seeAlsoTag.Text){
                    <li class="bulleted">@s</li>
                }
            </ul>
        </p>
    </div>
}

@helper RenderPermission(PermissionTag permissionTag)
{
    <p>Fix me, I don't know what I am!</p>
}

@helper RenderTopLevelContainer(TopLevelContainer container)
{
    if (container.Items == null) { return; }
    foreach (var element in container.Items)
     {
        @RenderContainerElement(element)
     }
}

@helper RenderContainer(Container container)
{  
    if (container.Items == null) { return; }
    foreach (var element in container.Items)
    {
        @RenderContainerElement(element)
    }
}

@helper RenderContainerElement(object element)
{
    if(element is string)
    {
        @element
    }
    if (element is ParagraphTag)
    {
        @RenderPara(element as ParagraphTag)
        return;
    }
    if (element is CTag)
    {
        @RenderC(element as CTag)
        return;
    }
    if (element is CodeTag)
    {
        @RenderCode(element as CodeTag)
        return;
    }
    if (element is ListTag)
    {
        @RenderList(element as ListTag);
        return;
    }
    if (element is ParameterReferenceTag)
    {
        @RenderParamRef(element as ParameterReferenceTag);
        return;
    }
    if (element is SeeTag)
    {
        @RenderSee(element as SeeTag);
        return;
    }
    if (element is TypeParameterReferenceTag)
    {
        @RenderTypeParamRef(element as TypeParameterReferenceTag);
        return;
    }
}

@helper RenderC(CTag cTag)
{
    <span class="inline-code">@CombineText(cTag.Text)</span>
}

@helper RenderCode(CodeTag codeTag)
{
    <div class="code-block">
        <pre><code>@CombineText(codeTag.Text)</code></pre> 
    </div>  
}

@helper RenderList(ListTag listTag)
{
    if (listTag.Elements != null&&listTag.Elements.Any()){
        if (listTag.ListType.Equals(ListType.Bullet))
        {
            <ul>
                @foreach (var element in listTag.Elements)
                {
                    <li>@RenderContainerElement(element)</li>
                }
            </ul>
        }else if (listTag.ListType.Equals(ListType.Number))
        {
            <ol>
                @foreach (var element in listTag.Elements)
                {
                    <li>@RenderContainerElement(element)</li>
                }
            </ol>
        }else{
            <table>
                @foreach (var element in listTag.Elements)
                {
                    <tr>
                        <td>@RenderContainerElement(element)</td>
                    </tr>
                }
            </table>
        }
    }else{
        <!--Add a debug message maybe?-->
    }
}

@helper RenderParamRef(ParameterReferenceTag paramRefTag)
{
    <b>@paramRefTag.Name</b>
}

@helper RenderSee(SeeTag seeTag)
{
    <b>@seeTag.ReferencedElementName</b>   
}

@helper RenderTypeParamRef(TypeParameterReferenceTag typeParamRefTag)
{
    <b>@typeParamRefTag.Name</b>
}

@helper  RenderPara(ParagraphTag paragraphTag)
{
    <p>@RenderContainer(paragraphTag)</p>
}