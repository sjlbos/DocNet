@*Generator: WebPagesHelper GeneratePrettyNames: true Namespace: DocNet.Razor.Helpers *@
@using System
@using System.Collections.Generic
@using System.Linq
@using DocNet.Core.Models.Comments.Xml

@functions
{
    private static string CombineText(IEnumerable<string> text)
    {
        return String.Join(String.Empty, text);
    }
}

@helper RenderSummary(SummaryTag summaryTag)
{
    <div class="summary-comment">
        <p>
            @RenderTopLevelContainer(summaryTag)
        </p>
    </div>
}

@helper RenderTableSummary(SummaryTag summaryTag)
{
    <div class="expand-table-cell summary-comment">
        @RenderTopLevelContainer(summaryTag)
    </div>
}

@helper RenderRemarks(RemarksTag remarksTag)
{
    <div class="remarks-comment">
        <p>
            @RenderTopLevelContainer(remarksTag)
        </p> 
    </div>
}

@helper RenderExample(ExampleTag exampleTag)
{
    <div class="example-comment">
        <p>
            @RenderTopLevelContainer(exampleTag)
        </p>
    </div>
}

@helper RenderReturns(ReturnsTag returnsTag)
{
    <div class="returns-comment">
        <p>
            @RenderTopLevelContainer(returnsTag)
        </p>
    </div>
}

@helper RenderValue(ValueTag valueTag)
{
    <div class="value-comment">
        <p>
            @RenderTopLevelContainer(valueTag)
        </p>
    </div>
}

@helper RenderParam(ParameterTag paramTag)
{
    <div class="parameter-comment">
        <p>
            @RenderTopLevelContainer(paramTag)
        </p>
    </div>
}

@helper RenderTypeParam(TypeParameterTag typeParamTag)
{
    <div class="type-parameter-comment">
        <p>
            @RenderTopLevelContainer(typeParamTag)
        </p>
    </div>
}

@helper RenderException(ExceptionTag exceptionTag)
{
    <div class="exception-comment">
        <p>
            @RenderTopLevelContainer(exceptionTag)
        </p>
    </div>
}

@helper RenderSeeAlso(SeeAlsoTag seeAlsoTag)
{
    <div class="see-also-comment">
        <p>
            @seeAlsoTag.ReferencedElementName<br/>
            @if (seeAlsoTag.Text!=null&seeAlsoTag.Text.Any())
            {
                <ul class="bulleted">
                    @foreach (string s in seeAlsoTag.Text)
                    {
                        <li class="bulleted">@s</li>
                    }
                </ul>
            }
        </p>
    </div>
}

@helper RenderPermission(PermissionTag permissionTag)
{
    <p></p>
}

@helper RenderTopLevelContainer(TopLevelContainer container)
{
    if (container.Items == null) { return; }
    foreach (var element in container.Items)
     {
        @RenderContainerElement(element)
     }
}

@helper RenderContainer(Container container)
{  
    if (container.Items == null) { return; }
    foreach (var element in container.Items)
    {
        @RenderContainerElement(element)
    }
}

@helper RenderContainerElement(object element)
{
    if(element is string)
    {
        @element
    }
    if (element is ParagraphTag)
    {
        @RenderPara(element as ParagraphTag)
        return;
    }
    if (element is CTag)
    {
        @RenderC(element as CTag)
        return;
    }
    if (element is CodeTag)
    {
        @RenderCode(element as CodeTag)
        return;
    }
    if (element is ListTag)
    {
        @RenderList(element as ListTag);
        return;
    }
    if (element is ParameterReferenceTag)
    {
        @RenderParamRef(element as ParameterReferenceTag);
        return;
    }
    if (element is SeeTag)
    {
        @RenderSee(element as SeeTag);
        return;
    }
    if (element is TypeParameterReferenceTag)
    {
        @RenderTypeParamRef(element as TypeParameterReferenceTag);
        return;
    }
}

@helper RenderC(CTag cTag)
{
    <span class="inline-code">@CombineText(cTag.Text)</span>
}

@helper RenderCode(CodeTag codeTag)
{
    <div class="code-block">
        <pre><code>@CombineText(codeTag.Text)</code></pre> 
    </div>  
}

@helper RenderList(ListTag listTag)
{
    if (listTag.Elements == null || !listTag.Elements.Any()) { return; }

    switch (listTag.ListType)
    {
        case ListType.Bullet:
            @_RenderListHeader(listTag.Header)
            <ul>
                @_RenderListBody(listTag.Elements)
            </ul>
            break;
        case ListType.Number:
            @_RenderListHeader(listTag.Header)
            <ol>
                @_RenderListBody(listTag.Elements)
            </ol>
            break;
        case ListType.Table:
            <table class="table table-bordered table-hover custom">
                @_RenderTableListHeader(listTag.Header)
                @_RenderTableListBody(listTag.Elements)
            </table>
            break;
    }
}

@helper _RenderListHeader(ListHeader header)
{
    if (header == null) { return; }
    <span>
    @if (header.Terms != null && header.Terms.Any())
    {
        
        <b>@CombineText(header.Terms.First().Text)</b>
        if (header.Descriptions != null && header.Descriptions.Any())
        {
            @(": " + CombineText(header.Descriptions.First().Text))
        }
    }
    </span>
}

@helper _RenderListBody(IList<ListItem> items)
{
    if (items == null || !items.Any()) { return; }
    foreach (var item in items)
    {
        if (!item.Terms.Any()) { continue; }
        <li>
            @CombineText(item.Terms.First().Text)
            @if (item.Descriptions.Any())
            {
                @(":" + CombineText(item.Descriptions.First().Text))
            }
        </li>
    }
}

@helper _RenderTableListHeader(ListHeader header)
{
    if (header == null) { return; }
    if (header.Terms != null && header.Terms.Any())
    {
        <tr>
        @for (int i = 0; i < header.Terms.Count; i++)
        {
            <th>
                @CombineText(header.Terms[i].Text)
                @if (i < header.Descriptions.Count && header.Descriptions[i] != null)
                {
                    <br />
                    @CombineText(header.Descriptions[i].Text)
                }
            </th>
        }
        </tr>
    }
}

@helper _RenderTableListBody(IList<ListItem> items)
{
    if (items == null || !items.Any()) { return; }
    foreach (var item in items)
    {
        if(item.Terms == null || !item.Terms.Any()) { continue; }
        <tr>
            @foreach (var term in item.Terms)
            {
                <td>@CombineText(term.Text)</td>
            }
        </tr>
    }
}

@helper RenderParamRef(ParameterReferenceTag paramRefTag)
{
    <b>@paramRefTag.Name</b>
}

@helper RenderSee(SeeTag seeTag)
{
    <b>@seeTag.ReferencedElementName</b>   
}

@helper RenderTypeParamRef(TypeParameterReferenceTag typeParamRefTag)
{
    <b>@typeParamRefTag.Name</b>
}

@helper  RenderPara(ParagraphTag paragraphTag)
{
    <p>@RenderContainer(paragraphTag)</p>
}