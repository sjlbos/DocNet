@*Generator: WebPagesHelper GeneratePrettyNames: true Namespace: DocNet.Razor.Helpers *@
@using System
@using System.Collections.Generic
@using System.Linq
@using DocNet.Core.Models.Comments
@using DocNet.Core.Models.Comments.Xml
@using DocNet.Core.Models.CSharp
@using DocNet.Razor.Helpers

@helper RenderElementTitle(CsElement element, string elementType)
{
    if(element is GlobalNamespaceModel)
    {
        <h2>Global Namespace</h2>
        return;
    }
    <h2>@(element.DisplayName + " " + elementType)</h2>
    if (!String.IsNullOrWhiteSpace(element.FullNameQualifier)){
        <span><b>Namespace:</b> @element.FullNameQualifier</span>
    }
}

@helper RenderDeclarationBlock(string declaration)
{
    @RenderSectionTitle("Declaration")
    <div class="code-block">
        <pre><code class="cs">@declaration</code></pre>
    </div>
}

@helper RenderSectionTitle(string title)
{
    <h3>@title</h3>
}

@helper RenderSummary(DocComment docComment)
{
    if (docComment == null || docComment.Summary == null) { return; }
    @RenderSectionTitle("Summary")
    @CommentTag.RenderSummary(docComment.Summary)
}

@helper RenderRemarks(DocComment docComment)
{
    if (docComment == null || docComment.Remarks == null) { return; }
    @RenderSectionTitle("Remarks")
    @CommentTag.RenderRemarks(docComment.Remarks)
}

@helper RenderExample(DocComment docComment)
{
    if (docComment == null || docComment.Example == null) { return; }
    @RenderSectionTitle("Example")
    @CommentTag.RenderExample(docComment.Example)
}

@helper RenderSeeAlso(DocComment docComment)
{
    if (docComment == null || docComment.SeeAlsoReferences == null || !docComment.SeeAlsoReferences.Any()) { return; }
    @RenderSectionTitle("See Also")
    <p>
        <ul>
            @foreach (var seeAlso in docComment.SeeAlsoReferences.OrderBy(sa => sa.ReferencedElementName))
            {
                <li>@seeAlso.ReferencedElementName</li>
            }
        </ul>
    </p>
}

@helper RenderExceptionTable(InterfaceDocComment docComment)
{
    if (docComment == null) { return; }
    @_RenderExceptionTable(docComment.Exceptions)
}

@helper RenderExceptionTable(MethodDocComment docComment)
{
    if (docComment == null) { return; }
    @_RenderExceptionTable(docComment.Exceptions)
}

@helper RenderExceptionTable(PropertyDocComment docComment)
{
    if (docComment == null) { return; }
    @_RenderExceptionTable(docComment.Exceptions)
}

@helper _RenderExceptionTable(IList<ExceptionTag> exceptions)
{
    if (exceptions == null || !exceptions.Any()) { return; }
    
    @RenderSectionTitle("Exceptions")
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Exception</th>
                <th>Description</th>
            </tr>
            @foreach (var exceptionTag in exceptions.OrderBy(e => e.ExceptionType))
            {
                <tr>
                    <td>@exceptionTag.ExceptionType</td>
                    <td>@CommentTag.RenderTableException(exceptionTag)</td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderTypeParamTable(InterfaceBase interfaceModel)
{
    if (interfaceModel.TypeParameters == null || !interfaceModel.TypeParameters.Any()) { return; }
    @_RenderTypeParamTable(interfaceModel.TypeParameters, interfaceModel.DocComment == null ? null : interfaceModel.DocComment.TypeParameters)
}

@helper RenderTypeParamTable(MethodModel methodModel)
{
    if (methodModel.TypeParameters == null || !methodModel.TypeParameters.Any()) { return; }
    @_RenderTypeParamTable(methodModel.TypeParameters, methodModel.DocComment == null ? null : methodModel.DocComment.TypeParameters)
}

@helper RenderTypeParamTable(DelegateModel delegateModel)
{
    if (delegateModel.TypeParameters == null || !delegateModel.TypeParameters.Any()) { return; }
    @_RenderTypeParamTable(delegateModel.TypeParameters, delegateModel.DocComment == null ? null : delegateModel.DocComment.TypeParameters)
}

@helper _RenderTypeParamTable(IList<TypeParameterModel> typeParams, IList<TypeParameterTag> typeParamComments)
{
    var paramToCommentMap = new Dictionary<string, TypeParameterTag>();
    if (typeParamComments != null)
    {
        paramToCommentMap = typeParamComments.ToDictionary(tag => tag.Name, tag => tag);
    }
    
    @RenderSectionTitle("Type Parameters")

    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Parameter Type</th>
                <th>Description</th>
            </tr>
            @foreach (var typeParam in typeParams.OrderBy(t => t.Name))
            {
                <tr>
                    <td>@(typeParam.Name + (!String.IsNullOrWhiteSpace(typeParam.Constraint) ? " : " + typeParam.Constraint : String.Empty)) </td>
                    <td>
                        @if (paramToCommentMap.ContainsKey(typeParam.Name))
                        {
                            @CommentTag.RenderTableTypeParam(paramToCommentMap[typeParam.Name])
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderParameterTable(MethodModel methodModel)
{
    if (methodModel.Parameters == null || !methodModel.Parameters.Any()) { return; }
    @_RenderParamaterTable(methodModel.Parameters, methodModel.DocComment == null ? null : methodModel.DocComment.Parameters)
}

@helper RenderParameterTable(ConstructorModel constructorModel)
{
    if (constructorModel.Parameters == null || !constructorModel.Parameters.Any()) { return; }
    @_RenderParamaterTable(constructorModel.Parameters, constructorModel.DocComment == null ? null : constructorModel.DocComment.Parameters)
}

@helper RenderParameterTable(DelegateModel delegateModel)
{
    if (delegateModel.Parameters == null || !delegateModel.Parameters.Any()) { return; }
    @_RenderParamaterTable(delegateModel.Parameters, delegateModel.DocComment == null ? null : delegateModel.DocComment.Parameters)
}

@helper _RenderParamaterTable(IList<ParameterModel> parameters, IList<ParameterTag> parameterComments)
{
    var paramToCommentMap = new Dictionary<string, ParameterTag>();
    if (parameterComments != null)
    {
        paramToCommentMap = parameterComments.ToDictionary(tag => tag.Name, tag => tag);
    }

    @RenderSectionTitle("Parameters")
    <p>
        <table class="table table3col table-bordered table-hover">
            <tr>
                <th>Type</th>
                <th>Parameter Name</th>
                <th>Description</th>
            </tr>
            @foreach (var param in parameters)
            {
                <tr>
                    <td>@param.TypeName</td>
                    <td>@param.Name</td>
                    <td>
                        @if (paramToCommentMap.ContainsKey(param.Name))
                        {
                            @CommentTag.RenderTableParam(paramToCommentMap[param.Name])
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderConstructorTable(ClassAndStructBase classAndStructBase)
{
    if (classAndStructBase.Constructors == null || !classAndStructBase.Constructors.Any()) { return; }
    
    @RenderSectionTitle("Constructors")

    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Constructor Name</th>
                <th>Description</th>
            </tr>
            @foreach (var constructor in classAndStructBase.Constructors.OrderBy(c => c.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(constructor)</td>
                    <td>
                        @if (constructor.DocComment != null && constructor.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(constructor.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderPropertyTable(InterfaceBase interfaceModel)
{
    if (interfaceModel.Properties == null || !interfaceModel.Properties.Any()) { return; }
    
    @RenderSectionTitle("Properties")

    <p>
        <table class="table table3col table-bordered table-hover">
            <tr>
                <th>Type</th>
                <th>Property Name</th>
                <th>Description</th>
            </tr>
            @foreach (var property in interfaceModel.Properties.OrderBy(p => p.DisplayName))
            {
                <tr>
                    <td>@property.TypeName</td>
                    <td>@PageHelper.RenderElementLink(property)</td>
                    <td>
                        @if (property.DocComment != null && property.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(property.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderMethodTable(InterfaceBase interfaceModel)
{
    if (interfaceModel.Methods == null || !interfaceModel.Methods.Any()) { return; }
    
    @RenderSectionTitle("Methods")
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Method Name</th>
                <th>Description</th>
            </tr>
            @foreach (var method in interfaceModel.Methods.OrderBy(m => m.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(method)</td>
                    <td>
                        @if (method.DocComment != null && method.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(method.DocComment.Summary)
                        }
                </td>
            </tr>
            }
        </table>
    </p>
}

@helper RenderReturnValueTable(MethodModel methodModel)
{
    @_RenderReturnValueTable(methodModel.ReturnType, methodModel.DocComment == null ? null : methodModel.DocComment.Returns)
}

@helper RenderReturnValueTable(DelegateModel delegateModel)
{
    @_RenderReturnValueTable(delegateModel.ReturnType, delegateModel.DocComment == null ? null : delegateModel.DocComment.Returns)
}

@helper _RenderReturnValueTable(string returnType, ReturnsTag returnsTag)
{
    if ("void".Equals(returnType, StringComparison.Ordinal)) { return; }
    
    @RenderSectionTitle("Returns")
    
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Return Type</th>
                <th>Description</th>
            </tr>  
            <tr>
                <td>@returnType</td>
                <td>
                    @if (returnsTag != null)
                    {
                        @CommentTag.RenderReturns(returnsTag)
                    }
                </td>
            </tr>
        </table>
    </p>
}

@helper RenderInterfaceTable(NamespaceBase parent)
{
    if (parent.Interfaces == null || !parent.Interfaces.Any()) { return; }
    @RenderSectionTitle("Interfaces")
    @_RenderInterfaceTable(parent.Interfaces)
}

@helper RenderInterfaceTable(ClassAndStructBase parent)
{
    if (parent.InnerInterfaces == null || !parent.InnerInterfaces.Any()) { return; }
    @RenderSectionTitle("Nested Classes")
    @_RenderInterfaceTable(parent.InnerInterfaces)
}

@helper _RenderInterfaceTable(IList<InterfaceModel> interfaces)
{
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
            @foreach (var childInterface in interfaces.OrderBy(i => i.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(childInterface)</td>
                    <td>
                        @if (childInterface.DocComment != null && childInterface.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(childInterface.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderClassTable(NamespaceBase parent)
{
    if (parent.Classes == null || !parent.Classes.Any()) { return; }
    @RenderSectionTitle("Classes")
    @_RenderClassTable(parent.Classes)
}

@helper RenderClassTable(ClassAndStructBase parent)
{
    if (parent.InnerClasses == null || !parent.InnerClasses.Any()) { return; }
    @RenderSectionTitle("Nested Classes")
    @_RenderClassTable(parent.InnerClasses)
}

@helper _RenderClassTable(IList<ClassModel> classes)
{
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
            @foreach (var childClass in classes.OrderBy(c => c.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(childClass)</td>
                    <td>
                        @if(childClass.DocComment != null && childClass.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(childClass.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderStructTable(NamespaceBase parent)
{
    if (parent.Structs == null || !parent.Structs.Any()) { return; }
    @RenderSectionTitle("Structs")
    @_RenderStructTable(parent.Structs)
}

@helper RenderStructTable(ClassAndStructBase parent)
{
    if (parent.InnerStructs == null || !parent.InnerStructs.Any()) { return; }
    @RenderSectionTitle("Nested Structs")
    @_RenderStructTable(parent.InnerStructs)
}

@helper _RenderStructTable(IList<StructModel> structs)
{
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
            @foreach (var childStruct in structs.OrderBy(s =>s.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(childStruct)</td>
                    <td>
                        @if (childStruct.DocComment != null && childStruct.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(childStruct.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderEnumTable(NamespaceBase parent)
{
    if (parent.Enums == null || !parent.Enums.Any()) { return; }
    @RenderSectionTitle("Enums")
    @_RenderEnumTable(parent.Enums)
}

@helper RenderEnumTable(ClassAndStructBase parent)
{
    if (parent.InnerEnums == null || !parent.InnerEnums.Any()) { return; }
    @RenderSectionTitle("Nested Enums")
    @_RenderEnumTable(parent.InnerEnums)
}

@helper _RenderEnumTable(IList<EnumModel> enums)
{
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
            @foreach (var childEnum in enums.OrderBy(e => e.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(childEnum)</td>
                    <td>
                        @if (childEnum.DocComment != null && childEnum.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(childEnum.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}

@helper RenderDelegateTable(NamespaceBase parent)
{
    if (parent.Delegates == null || !parent.Delegates.Any()) { return; }
    @RenderSectionTitle("Delegates")
    @_RenderDelegateTable(parent.Delegates)
}

@helper RenderDelegateTable(ClassAndStructBase parent)
{
    if (parent.InnerDelegates == null || !parent.InnerDelegates.Any()) { return; }
    @RenderSectionTitle("Inner Delegates")
    @_RenderDelegateTable(parent.InnerDelegates)
}

@helper _RenderDelegateTable(IList<DelegateModel> delegates)
{
    <p>
        <table class="table table2col table-bordered table-hover">
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
            @foreach (var childDelegate in delegates.OrderBy(d => d.DisplayName))
            {
                <tr>
                    <td>@PageHelper.RenderElementLink(childDelegate)</td>
                    <td>
                        @if (childDelegate.DocComment != null && childDelegate.DocComment.Summary != null)
                        {
                            @CommentTag.RenderTableSummary(childDelegate.DocComment.Summary)
                        }
                    </td>
                </tr>
            }
        </table>
    </p>
}