@*Generator: WebPagesHelper GeneratePrettyNames: true Namespace: DocNet.Razor.Helpers *@
@using System.Collections.Generic
@using System.Linq
@using DocNet.Core.Exceptions
@using DocNet.Core.Models.CSharp
@using DocNet.Core.Output.Html



@helper RenderHead(IEnumerable<string> includedCss, IEnumerable<string> includedScripts)
{
    <head>
        <meta charset="utf-8">
        @foreach (var cssFile in includedCss)
        {
        <link href="@(cssFile)" rel="stylesheet"/>
        }
        @foreach (var jsFile in includedScripts)
        {
        <script src="@(jsFile)" type="text/javascript"></script>
        }
        <script>hljs.initHighlightingOnLoad();</script>
        <title>DocNet Output</title>
    </head>
}

@helper RenderSidebar(GlobalNamespaceModel globalNamespace, CsElement currentViewModel)
{
    var sortedChilren = globalNamespace.OrderBy(child => child.DisplayName);
    <div id="over">
        <h2>Hierarchy</h2>
        <ul>
            @RenderChildList(sortedChilren, true, currentViewModel)
        </ul>    
    </div>
}

@helper RenderParentElement(IParentElement parent, CsElement currentViewModel)
{
    var sortedChildren = parent.OrderBy(child => child.DisplayName);
    bool hasChildren = sortedChildren.Any();    
    bool isExpanded = (parent == currentViewModel) || parent.HasDescendant(currentViewModel as INestableElement);

    var parentElement = parent as CsElement;
    if (parentElement == null)
    {
        throw new DocumentationGenerationException("Parent element is not a CsElement.");
    }

    <li>
        <div class="expand link" onclick="ToggleSidebarNode(this)">
            @if(hasChildren)
            {
                <span class="glyphicon @(isExpanded ? "glyphicon-menu-down" : "glyphicon-menu-right")"></span>
            }
            else
            {
                <span class="expand"></span>
            }            
        </div>
        <a href="@HtmlDocumentationGenerator.GetFileNameForCsElement(parentElement)">@parentElement.DisplayName</a>
        @if(hasChildren)
        {
            @RenderChildList(sortedChildren, isExpanded, currentViewModel)
        }     
    </li>
}

@helper RenderChildList(IEnumerable<INestableElement> children, bool isExpanded, CsElement currentViewModel)
{
    <ul class="child-list collapse @(isExpanded ? "in" : "")">

        @foreach (var child in children)
        {
            if (child is IParentElement)
            {
                @RenderParentElement(child as IParentElement, currentViewModel)
            }
            else
            {
                <li><span class="expand"></span><a href="@HtmlDocumentationGenerator.GetFileNameForCsElement(child as CsElement)">@child.DisplayName</a></li>
            }
        }
    </ul>
}
