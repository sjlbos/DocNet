@*Generator: WebPagesHelper GeneratePrettyNames: true Namespace: DocNet.Razor.Helpers *@
@using System.Collections.Generic
@using System.Linq
@using DocNet.Core.Exceptions
@using DocNet.Core.Models.CSharp
@using DocNet.Core.Output.Html



@helper RenderHead(IEnumerable<string> includedCss, IEnumerable<string> includedScripts)
{
    <head>
        <meta charset="utf-8">
        @foreach (var cssFile in includedCss)
        {
        <link href="@(cssFile)" rel="stylesheet"/>
        }
        @foreach (var jsFile in includedScripts)
        {
        <script src="@(jsFile)"></script>
        }
        <script>hljs.initHighlightingOnLoad();</script>
        <title>DocNet Output</title>
    </head>
}

@helper RenderSidebar(GlobalNamespaceModel globalNamespace, INestableElement currentViewModel)
{
    <div id="over">
        <h2>Hierarchy</h2>
        @RenderParentElement(globalNamespace, currentViewModel, 0)
    </div>
}

@helper RenderParentElement(IParentElement parent, INestableElement currentViewModel, int nestingLevel)
{
    var sortedChildren = parent.OrderBy(child => child.UniqueName);
    bool isExpanded = parent.HasDescendant(currentViewModel);

    var parentElement = parent as CsElement;
    if (parentElement == null)
    {
        throw new DocumentationGenerationException("Parent element is not a CsElement.");
    }

    <ul>
        <li>
            <div class="expand link" onclick="hide(this, @nestingLevel)"><span class="glyphicon glyphicon-menu-@(isExpanded ? "down" : "right")" aria-hidden="true"></span></div><a href="@HtmlDocumentationGenerator.GetFileNameForCsElement(parentElement)">@parentElement.UniqueName</a>
            <ul class="collapse@(isExpanded ? "in" : "")" id="collapse@nestingLevel"></ul>
        </li>
    </ul>


    foreach (var child in sortedChildren)
    {
        if (child is IParentElement)
        {
            @RenderParentElement(child as IParentElement, currentViewModel, nestingLevel + 1)
        }
        else
        {
            <li><span class="expand"></span><a href="@HtmlDocumentationGenerator.GetFileNameForCsElement(child as CsElement)">@child.UniqueName</a></li>
        }
    }
}
